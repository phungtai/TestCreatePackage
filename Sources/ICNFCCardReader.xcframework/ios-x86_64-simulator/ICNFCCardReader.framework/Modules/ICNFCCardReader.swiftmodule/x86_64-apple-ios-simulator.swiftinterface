// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ICNFCCardReader
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
import Combine
import CommonCrypto
import CoreGraphics
import CoreNFC
import CoreText
import CryptoKit
import CryptoTokenKit
import Foundation
@_exported import ICNFCCardReader
import OpenSSL
import QuartzCore
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageAsset : ICNFCCardReader.Asset {
  final public let name: Swift.String
  final public let directory: Swift.String
  final public let width: Swift.Double
  final public let height: Swift.Double
  override final public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
public protocol AnimationImageProvider {
  func imageForAsset(asset: ICNFCCardReader.ImageAsset) -> CoreGraphics.CGImage?
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: ICNFCCardReader.SecureMessagingSupportedAlgorithms, b: ICNFCCardReader.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: ICNFCCardReader.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
extension ICNFCCardReader.Vector1D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct Vector2D : Swift.Codable, Swift.Hashable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICNFCCardReader.Vector2D, b: ICNFCCardReader.Vector2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension ICNFCCardReader.Vector3D : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension ICNFCCardReader.Vector3D {
  public var pointValue: CoreFoundation.CGPoint {
    get
  }
  public var sizeValue: CoreFoundation.CGSize {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class SecurityInfo {
  public func getObjectIdentifier() -> Swift.String
  public func getProtocolOIDString() -> Swift.String
  @objc deinit
}
public enum CoordinateSpace : Swift.Int, Swift.Codable {
  case type2d
  case type3d
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
final public class Animation : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  public init(dictionary: [Swift.String : Any]) throws
  final public let startFrame: ICNFCCardReader.AnimationFrameTime
  final public let endFrame: ICNFCCardReader.AnimationFrameTime
  final public let framerate: Swift.Double
  final public var markerNames: [Swift.String] {
    get
  }
  @objc deinit
  final public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(ICNFCCardReader.DataGroupId, Swift.Int)
  case error(ICNFCCardReader.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup12 : ICNFCCardReader.DataGroup {
  public var issuingAuthority: Swift.String? {
    get
  }
  public var dateOfIssue: Swift.String? {
    get
  }
  public var otherPersonsDetails: Swift.String? {
    get
  }
  public var endorsementsOrObservations: Swift.String? {
    get
  }
  public var taxOrExitRequirements: Swift.String? {
    get
  }
  public var frontImage: [Swift.UInt8]? {
    get
  }
  public var rearImage: [Swift.UInt8]? {
    get
  }
  public var personalizationTime: Swift.String? {
    get
  }
  public var personalizationDeviceSerialNr: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup13 : ICNFCCardReader.DataGroup {
  public static let PREFIX_EID: [Swift.UInt8]
  public static let IDX_FULLNAME: Swift.UInt8
  public static let PREFIX_FULLNAME: [Swift.UInt8]
  public static let IDX_DOB: Swift.UInt8
  public static let PREFIX_DOB: [Swift.UInt8]
  public static let IDX_GENDER: Swift.UInt8
  public static let PREFIX_GENDER: [Swift.UInt8]
  public static let IDX_NATIONALITY: Swift.UInt8
  public static let PREFIX_NATIONALITY: [Swift.UInt8]
  public static let IDX_ETHNICITY: Swift.UInt8
  public static let PREFIX_ETHNICITY: [Swift.UInt8]
  public static let IDX_RELIGION: Swift.UInt8
  public static let PREFIX_RELIGION: [Swift.UInt8]
  public static let IDX_POG: Swift.UInt8
  public static let PREFIX_POG: [Swift.UInt8]
  public static let IDX_POR: Swift.UInt8
  public static let PREFIX_POR: [Swift.UInt8]
  public static let IDX_PERSONAL_IDENTIFICATION: Swift.UInt8
  public static let PREFIX_PERSONAL_IDENTIFICATION: [Swift.UInt8]
  public static let IDX_DATEOFISSUE: Swift.UInt8
  public static let PREFIX_DATEOFISSUE: [Swift.UInt8]
  public static let IDX_DATEOFEXPIRY: Swift.UInt8
  public static let PREFIX_DATEOFEXPIRY: [Swift.UInt8]
  public static let IDX_FAMILY: Swift.UInt8
  public static let PREFIX_FAMILY: [Swift.UInt8]
  public static let PREFIX_FATHERNAME: [Swift.UInt8]
  public static let PREFIX_MOTHERNAME: [Swift.UInt8]
  public static let IDX_PARTNERNAME: Swift.UInt8
  public static let PREFIX_PARTNERNAME: [Swift.UInt8]
  public static let IDX_OLDEID: Swift.UInt8
  public static let PREFIX_OLDEID: [Swift.UInt8]
  public static let IDX_CARDUNK: Swift.UInt8
  public static let PREFIX_UNK: [Swift.UInt8]
  public var eidNumber: Swift.String?
  public var fullName: Swift.String?
  public var dateOfBirth: Swift.String?
  public var gender: Swift.String?
  public var nationality: Swift.String?
  public var ethnicity: Swift.String?
  public var religion: Swift.String?
  public var placeOfOrigin: Swift.String?
  public var placeOfResidence: Swift.String?
  public var personalIdentification: Swift.String?
  public var dateOfIssue: Swift.String?
  public var dateOfExpiry: Swift.String?
  public var fatherName: Swift.String?
  public var motherName: Swift.String?
  public var partnerName: Swift.String?
  public var oldEidNumber: Swift.String?
  public var unkIdNumber: Swift.String?
  public var unkInfo: [Swift.String]
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationPublicKeyInfo : ICNFCCardReader.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  @objc deinit
}
@available(iOS 13, *)
public protocol PassportReaderDelegate {
  func passportReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  func passportReaderIdInvalidate(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  func passportReaderSessionDidDetect(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
  func passportReaderReadingProgress(progress: Swift.Int)
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  public var delegate: (any ICNFCCardReader.PassportReaderDelegate)?
  public var isActiveAuthentication: Swift.Bool
  public var isChipAuthentication: Swift.Bool
  public var passiveAuthenticationUsesOpenSSL: Swift.Bool
  public init(logLevel: ICNFCCardReader.LogLevel = .info, masterListURL: Foundation.URL? = nil)
  public func setMasterListURL(_ masterListURL: Foundation.URL)
  public func overrideNFCDataAmountToRead(amount: Swift.Int)
  #if compiler(>=5.3) && $AsyncAwait
  @available(*, deprecated, message: "Use readPassport( accessKey: ...) instead")
  public func readPassport(mrzKey: Swift.String, tags: [ICNFCCardReader.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((ICNFCCardReader.NFCViewDisplayMessage) -> Swift.String?)? = nil) async throws -> ICNFCCardReader.NFCPassportModel
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  public func readPassport(accessKey: ICNFCCardReader.PACEAccessKey, tags: [ICNFCCardReader.DataGroupId] = [], skipSecureElements: Swift.Bool = true, skipCA: Swift.Bool = false, skipPACE: Swift.Bool = false, customDisplayMessage: ((ICNFCCardReader.NFCViewDisplayMessage) -> Swift.String?)? = nil) async throws -> ICNFCCardReader.NFCPassportModel
  #endif
  public func retryBegin()
  @objc deinit
}
@available(iOS 13, *)
extension ICNFCCardReader.PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
extension UIKit.UIColor {
  public var lottieColorValue: ICNFCCardReader.Color {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup15 : ICNFCCardReader.DataGroup {
  public var rsaPublicKey: Swift.OpaquePointer? {
    get
  }
  public var ecdsaPublicKey: Swift.OpaquePointer? {
    get
  }
  @objc deinit
}
@objc final public class CompatibleAnimationKeypath : ObjectiveC.NSObject {
  @objc public init(keypath: Swift.String)
  @objc public init(keys: [Swift.String])
  final public let animationKeypath: ICNFCCardReader.AnimationKeypath
  @objc deinit
}
public protocol Interpolatable : ICNFCCardReader.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
public protocol SpatialInterpolatable : ICNFCCardReader.AnyInterpolatable {
  func interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
public protocol AnyInterpolatable {
  func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension ICNFCCardReader.Interpolatable {
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent _: CoreFoundation.CGPoint?, spatialInTangent _: CoreFoundation.CGPoint?) -> Self
}
extension ICNFCCardReader.SpatialInterpolatable {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
  public func _interpolate(to: Self, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> Self
}
extension Swift.Double : ICNFCCardReader.Interpolatable {
}
extension CoreFoundation.CGFloat : ICNFCCardReader.Interpolatable {
}
extension Swift.Float : ICNFCCardReader.Interpolatable {
}
extension ICNFCCardReader.Interpolatable where Self : Swift.BinaryFloatingPoint {
  public func interpolate(to: Self, amount: CoreFoundation.CGFloat) -> Self
}
extension CoreFoundation.CGRect : ICNFCCardReader.Interpolatable {
  public func interpolate(to: CoreFoundation.CGRect, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGRect
}
extension CoreFoundation.CGSize : ICNFCCardReader.Interpolatable {
  public func interpolate(to: CoreFoundation.CGSize, amount: CoreFoundation.CGFloat) -> CoreFoundation.CGSize
}
extension CoreFoundation.CGPoint : ICNFCCardReader.SpatialInterpolatable {
  public func interpolate(to: CoreFoundation.CGPoint, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> CoreFoundation.CGPoint
}
extension ICNFCCardReader.Color : ICNFCCardReader.Interpolatable {
  public func interpolate(to: ICNFCCardReader.Color, amount: CoreFoundation.CGFloat) -> ICNFCCardReader.Color
}
extension ICNFCCardReader.Vector1D : ICNFCCardReader.Interpolatable {
  public func interpolate(to: ICNFCCardReader.Vector1D, amount: CoreFoundation.CGFloat) -> ICNFCCardReader.Vector1D
}
extension ICNFCCardReader.Vector2D : ICNFCCardReader.SpatialInterpolatable {
  public func interpolate(to: ICNFCCardReader.Vector2D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> ICNFCCardReader.Vector2D
}
extension ICNFCCardReader.Vector3D : ICNFCCardReader.SpatialInterpolatable {
  public func interpolate(to: ICNFCCardReader.Vector3D, amount: CoreFoundation.CGFloat, spatialOutTangent: CoreFoundation.CGPoint?, spatialInTangent: CoreFoundation.CGPoint?) -> ICNFCCardReader.Vector3D
}
extension Swift.Array : ICNFCCardReader.Interpolatable, ICNFCCardReader.AnyInterpolatable where Element : ICNFCCardReader.Interpolatable {
  public func interpolate(to: [Element], amount: CoreFoundation.CGFloat) -> [Element]
}
public enum LottieBackgroundBehavior {
  case stop
  case pause
  case pauseAndRestore
  case forceFinish
  case continuePlaying
  public static func `default`(for renderingEngine: ICNFCCardReader.RenderingEngine) -> ICNFCCardReader.LottieBackgroundBehavior
  public static func == (a: ICNFCCardReader.LottieBackgroundBehavior, b: ICNFCCardReader.LottieBackgroundBehavior) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LottieLoopMode {
  case playOnce
  case loop
  case autoReverse
  case `repeat`(Swift.Float)
  case repeatBackwards(Swift.Float)
}
extension ICNFCCardReader.LottieLoopMode : Swift.Equatable {
  public static func == (lhs: ICNFCCardReader.LottieLoopMode, rhs: ICNFCCardReader.LottieLoopMode) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) final public class AnimationView : ICNFCCardReader.AnimationViewBase {
  @_Concurrency.MainActor(unsafe) public init(animation: ICNFCCardReader.Animation?, imageProvider: (any ICNFCCardReader.AnimationImageProvider)? = nil, textProvider: any ICNFCCardReader.AnimationTextProvider = DefaultTextProvider(), fontProvider: any ICNFCCardReader.AnimationFontProvider = DefaultFontProvider(), configuration: ICNFCCardReader.LottieConfiguration = .shared, logger: ICNFCCardReader.LottieLogger = .shared)
  @_Concurrency.MainActor(unsafe) public init(configuration: ICNFCCardReader.LottieConfiguration = .shared, logger: ICNFCCardReader.LottieLogger = .shared)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) final public let configuration: ICNFCCardReader.LottieConfiguration
  @_Concurrency.MainActor(unsafe) final public var valueProviders: [ICNFCCardReader.AnimationKeypath : any ICNFCCardReader.AnyValueProvider] {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var backgroundBehavior: ICNFCCardReader.LottieBackgroundBehavior {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var animation: ICNFCCardReader.Animation? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var imageProvider: any ICNFCCardReader.AnimationImageProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var textProvider: any ICNFCCardReader.AnimationTextProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var fontProvider: any ICNFCCardReader.AnimationFontProvider {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimationPlaying: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimationQueued: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var loopMode: ICNFCCardReader.LottieLoopMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var shouldRasterizeWhenIdle: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currentProgress: ICNFCCardReader.AnimationProgressTime {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currentTime: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var currentFrame: ICNFCCardReader.AnimationFrameTime {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var realtimeAnimationFrame: ICNFCCardReader.AnimationFrameTime {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var realtimeAnimationProgress: ICNFCCardReader.AnimationProgressTime {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var respectAnimationFrameRate: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var viewportFrame: CoreFoundation.CGRect? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public var currentRenderingEngine: ICNFCCardReader.RenderingEngine? {
    get
  }
  @_Concurrency.MainActor(unsafe) final public func play(completion: ICNFCCardReader.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func play(fromProgress: ICNFCCardReader.AnimationProgressTime? = nil, toProgress: ICNFCCardReader.AnimationProgressTime, loopMode: ICNFCCardReader.LottieLoopMode? = nil, completion: ICNFCCardReader.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func play(fromFrame: ICNFCCardReader.AnimationFrameTime? = nil, toFrame: ICNFCCardReader.AnimationFrameTime, loopMode: ICNFCCardReader.LottieLoopMode? = nil, completion: ICNFCCardReader.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func play(fromMarker: Swift.String? = nil, toMarker: Swift.String, loopMode: ICNFCCardReader.LottieLoopMode? = nil, completion: ICNFCCardReader.LottieCompletionBlock? = nil)
  @_Concurrency.MainActor(unsafe) final public func stop()
  @_Concurrency.MainActor(unsafe) final public func pause()
  @_Concurrency.MainActor(unsafe) final public func reloadImages()
  @_Concurrency.MainActor(unsafe) final public func forceDisplayUpdate()
  @_Concurrency.MainActor(unsafe) final public func setValueProvider(_ valueProvider: any ICNFCCardReader.AnyValueProvider, keypath: ICNFCCardReader.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) final public func getValue(for keypath: ICNFCCardReader.AnimationKeypath, atFrame: ICNFCCardReader.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor(unsafe) final public func getOriginalValue(for keypath: ICNFCCardReader.AnimationKeypath, atFrame: ICNFCCardReader.AnimationFrameTime?) -> Any?
  @_Concurrency.MainActor(unsafe) final public func logHierarchyKeypaths()
  @_Concurrency.MainActor(unsafe) final public func addSubview(_ subview: ICNFCCardReader.AnimationSubview, forLayerAt keypath: ICNFCCardReader.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) final public func convert(_ rect: CoreFoundation.CGRect, toLayerAt keypath: ICNFCCardReader.AnimationKeypath?) -> CoreFoundation.CGRect?
  @_Concurrency.MainActor(unsafe) final public func convert(_ point: CoreFoundation.CGPoint, toLayerAt keypath: ICNFCCardReader.AnimationKeypath?) -> CoreFoundation.CGPoint?
  @_Concurrency.MainActor(unsafe) final public func setNodeIsEnabled(isEnabled: Swift.Bool, keypath: ICNFCCardReader.AnimationKeypath)
  @_Concurrency.MainActor(unsafe) final public func progressTime(forMarker named: Swift.String) -> ICNFCCardReader.AnimationProgressTime?
  @_Concurrency.MainActor(unsafe) final public func frameTime(forMarker named: Swift.String) -> ICNFCCardReader.AnimationFrameTime?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedSwitch : ICNFCCardReader.AnimatedControl {
  @_Concurrency.MainActor(unsafe) override public init(animation: ICNFCCardReader.Animation, configuration: ICNFCCardReader.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public enum CancelBehavior {
    case reverse
    case none
    public static func == (a: ICNFCCardReader.AnimatedSwitch.CancelBehavior, b: ICNFCCardReader.AnimatedSwitch.CancelBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var cancelBehavior: ICNFCCardReader.AnimatedSwitch.CancelBehavior
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var isOn: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setIsOn(_ isOn: Swift.Bool, animated: Swift.Bool, shouldFireHaptics: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func setProgressForState(fromProgress: ICNFCCardReader.AnimationProgressTime, toProgress: ICNFCCardReader.AnimationProgressTime, forOnState: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) override public func animationDidSet()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class AnimatedButton : ICNFCCardReader.AnimatedControl {
  @_Concurrency.MainActor(unsafe) override public init(animation: ICNFCCardReader.Animation, configuration: ICNFCCardReader.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public func setPlayRange(fromProgress: ICNFCCardReader.AnimationProgressTime, toProgress: ICNFCCardReader.AnimationProgressTime, event: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) public func setPlayRange(fromMarker fromName: Swift.String, toMarker toName: Swift.String, event: UIKit.UIControl.Event)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : ICNFCCardReader.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@objc public protocol ICMRZScannerCodeDelegate {
  @objc func icMRZScannerCodeDismissed(isStepScan: Swift.Bool)
  @objc func icMRZScannerCodeCompleted(idNumber: Swift.String, birthDate: Swift.String, expiryDate: Swift.String, backImage: UIKit.UIImage, cropImage: UIKit.UIImage)
}
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc @_Concurrency.MainActor(unsafe) open class ICMRZScannerCodeViewController : ICNFCCardReader.ICNFCBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) weak public var scanMRZCodeDelegate: (any ICNFCCardReader.ICMRZScannerCodeDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var languageApplication: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var isShowTutorial: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func deallocCameraSession()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICMRZScannerCodeViewController : ICNFCCardReader.QKMRZScannerViewDelegate {
  @_Concurrency.MainActor(unsafe) public func mrzScannerView(_ mrzScannerView: ICNFCCardReader.QKMRZScannerView, didFind scanResult: ICNFCCardReader.QKMRZScanResult, mrzLines: [Swift.String])
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICMRZScannerCodeViewController : ICNFCCardReader.ICNFCHelpImageDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icNFCHelpImageGotIt()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icNFCHelpImageDismissed()
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICMRZScannerCodeViewController : ICNFCCardReader.ICPopupCloseSdkDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icPopupCloseSdkPressedLeft()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icPopupCloseSdkPressedRight()
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICMRZScannerCodeViewController : ICNFCCardReader.ICPopupPermissionCameraDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icPopupPermissionCameraPressedLeft()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icPopupPermissionCameraPressedRight()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup11 : ICNFCCardReader.DataGroup {
  public var fullName: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var dateOfBirth: Swift.String? {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var address: Swift.String? {
    get
  }
  public var telephone: Swift.String? {
    get
  }
  public var profession: Swift.String? {
    get
  }
  public var title: Swift.String? {
    get
  }
  public var personalSummary: Swift.String? {
    get
  }
  public var proofOfCitizenship: Swift.String? {
    get
  }
  public var tdNumbers: Swift.String? {
    get
  }
  public var custodyInfo: Swift.String? {
    get
  }
  @objc deinit
}
final public class Keyframe<T> {
  public init(_ value: T, spatialInTangent: ICNFCCardReader.Vector3D? = nil, spatialOutTangent: ICNFCCardReader.Vector3D? = nil)
  public init(value: T, time: ICNFCCardReader.AnimationFrameTime, isHold: Swift.Bool = false, inTangent: ICNFCCardReader.Vector2D? = nil, outTangent: ICNFCCardReader.Vector2D? = nil, spatialInTangent: ICNFCCardReader.Vector3D? = nil, spatialOutTangent: ICNFCCardReader.Vector3D? = nil)
  final public let value: T
  final public let time: ICNFCCardReader.AnimationFrameTime
  final public let isHold: Swift.Bool
  final public let inTangent: ICNFCCardReader.Vector2D?
  final public let outTangent: ICNFCCardReader.Vector2D?
  final public let spatialInTangent: ICNFCCardReader.Vector3D?
  final public let spatialOutTangent: ICNFCCardReader.Vector3D?
  @objc deinit
}
extension ICNFCCardReader.Keyframe : Swift.Equatable where T : Swift.Equatable {
  public static func == (lhs: ICNFCCardReader.Keyframe<T>, rhs: ICNFCCardReader.Keyframe<T>) -> Swift.Bool
}
extension ICNFCCardReader.Keyframe : Swift.Hashable where T : Swift.Hashable {
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class OpenSSLUtils {
  public static func getOpenSSLError() -> Swift.String
  @available(iOS 13, macOS 10.15, *)
  public static func getPublicKeyData(from key: Swift.OpaquePointer) -> [Swift.UInt8]?
  @available(iOS 13, macOS 10.15, *)
  public static func decodePublicKeyFromBytes(pubKeyData: [Swift.UInt8], params: Swift.OpaquePointer) -> Swift.OpaquePointer?
  public static func computeSharedSecret(privateKeyPair: Swift.OpaquePointer, publicKey: Swift.OpaquePointer) -> [Swift.UInt8]
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: ICNFCCardReader.PassportAuthenticationStatus, b: ICNFCCardReader.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var documentType: Swift.String {
    get
  }
  public var documentSubType: Swift.String {
    get
  }
  public var documentNumber: Swift.String {
    get
  }
  public var issuingAuthority: Swift.String {
    get
  }
  public var documentExpiryDate: Swift.String {
    get
  }
  public var dateOfBirth: Swift.String {
    get
  }
  public var gender: Swift.String {
    get
  }
  public var nationality: Swift.String {
    get
  }
  public var lastName: Swift.String {
    get
  }
  public var firstName: Swift.String {
    get
  }
  public var passportMRZ: Swift.String {
    get
  }
  public var placeOfBirth: Swift.String? {
    get
  }
  public var residenceAddress: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var personalNumber: Swift.String? {
    get
  }
  public var documentSigningCertificate: ICNFCCardReader.X509Wrapper? {
    get
  }
  public var countrySigningCertificate: ICNFCCardReader.X509Wrapper? {
    get
  }
  public var LDSVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  public var dataGroupsAvailable: [ICNFCCardReader.DataGroupId] {
    get
  }
  public var dataGroupsRead: [ICNFCCardReader.DataGroupId : ICNFCCardReader.DataGroup] {
    get
  }
  public var dataGroupHashes: [ICNFCCardReader.DataGroupId : ICNFCCardReader.DataGroupHash] {
    get
  }
  public var cardAccess: ICNFCCardReader.CardAccess? {
    get
  }
  public var BACStatus: ICNFCCardReader.PassportAuthenticationStatus {
    get
  }
  public var PACEStatus: ICNFCCardReader.PassportAuthenticationStatus {
    get
  }
  public var chipAuthenticationStatus: ICNFCCardReader.PassportAuthenticationStatus {
    get
  }
  public var activeAuthenticationStatus: ICNFCCardReader.PassportAuthenticationStatus {
    get
  }
  public var passportCorrectlySigned: Swift.Bool {
    get
  }
  public var documentSigningCertificateVerified: Swift.Bool {
    get
  }
  public var passportDataNotTampered: Swift.Bool {
    get
  }
  public var activeAuthenticationPassed: Swift.Bool {
    get
  }
  public var activeAuthenticationChallenge: [Swift.UInt8] {
    get
  }
  public var activeAuthenticationSignature: [Swift.UInt8] {
    get
  }
  public var verificationErrors: [any Swift.Error] {
    get
  }
  public var isPACESupported: Swift.Bool {
    get
  }
  public var isChipAuthenticationSupported: Swift.Bool {
    get
  }
  public var passportImage: UIKit.UIImage? {
    get
  }
  public var signatureImage: UIKit.UIImage? {
    get
  }
  public var activeAuthenticationSupported: Swift.Bool {
    get
  }
  public init()
  public init(from dump: [Swift.String : Swift.String])
  public func addDataGroup(_ id: ICNFCCardReader.DataGroupId, dataGroup: ICNFCCardReader.DataGroup)
  public func getDataGroup(_ id: ICNFCCardReader.DataGroupId) -> ICNFCCardReader.DataGroup?
  public func dumpPassportData(selectedDataGroups: [ICNFCCardReader.DataGroupId], includeActiveAuthenticationData: Swift.Bool = false) -> [Swift.String : Swift.String]
  public func getHashesForDatagroups(hashAlgorythm: Swift.String) -> [ICNFCCardReader.DataGroupId : [Swift.UInt8]]
  public func verifyPassport(masterListURL: Foundation.URL?, useCMSVerification: Swift.Bool = false)
  public func verifyActiveAuthentication(challenge: [Swift.UInt8], signature: [Swift.UInt8])
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ICNFCCardReader.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [ICNFCCardReader.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: ICNFCCardReader.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AnimationViewBase : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QKMRZScanResult {
  final public let documentImage: UIKit.UIImage
  final public let documentType: Swift.String
  final public let countryCode: Swift.String
  final public let surnames: Swift.String
  final public let givenNames: Swift.String
  final public let documentNumber: Swift.String
  final public let nationality: Swift.String
  final public let birthDate: Foundation.Date?
  final public let sex: Swift.String?
  final public let expiryDate: Foundation.Date?
  final public let personalNumber: Swift.String
  final public let personalNumber2: Swift.String?
  final public let birthDateString: Swift.String
  final public let expiryDateString: Swift.String
  public var faceImage: UIKit.UIImage? {
    get
  }
  @objc deinit
}
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationality: Swift.String
  public let birthDate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let birthDateString: Swift.String
  public let expiryDateString: Swift.String
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthDateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
extension ICNFCCardReader.BERTLV {
  public static func parse(hexString: Swift.String) throws -> [ICNFCCardReader.BERTLV]
  public static func parse(bytes: [Swift.UInt8]) throws -> [ICNFCCardReader.BERTLV]
}
@available(iOS 13.0, *)
public protocol QKMRZScannerViewDelegate : AnyObject {
  func mrzScannerView(_ mrzScannerView: ICNFCCardReader.QKMRZScannerView, didFind scanResult: ICNFCCardReader.QKMRZScanResult, mrzLines: [Swift.String])
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@IBDesignable @_Concurrency.MainActor(unsafe) public class QKMRZScannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isScanning: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var vibrateOnResult: Swift.Bool
  @_Concurrency.MainActor(unsafe) weak public var delegate: (any ICNFCCardReader.QKMRZScannerViewDelegate)?
  @_Concurrency.MainActor(unsafe) public var cutoutRect: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor(unsafe) public func startScanning()
  @objc @_Concurrency.MainActor(unsafe) public func stopScanning()
  @objc @_Concurrency.MainActor(unsafe) public var isSessionRunning: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public func removeInputOutput()
  @objc @_Concurrency.MainActor(unsafe) public func deallocSession()
}
@available(iOS 13.0, *)
extension ICNFCCardReader.QKMRZScannerView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: ICNFCCardReader.TagReader)
  #if compiler(>=5.3) && $AsyncAwait
  public func performBACAndGetSessionKeys(mrzKey: Swift.String) async throws
  #endif
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public enum ColorFormatDenominator : Swift.Hashable {
  case One
  case OneHundred
  case TwoFiftyFive
  public static func == (a: ICNFCCardReader.ColorFormatDenominator, b: ICNFCCardReader.ColorFormatDenominator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Color : Swift.Hashable {
  public var r: Swift.Double
  public var g: Swift.Double
  public var b: Swift.Double
  public var a: Swift.Double
  public init(r: Swift.Double, g: Swift.Double, b: Swift.Double, a: Swift.Double, denominator: ICNFCCardReader.ColorFormatDenominator = .One)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICNFCCardReader.Color, b: ICNFCCardReader.Color) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AnimationCacheProvider {
  func animation(forKey: Swift.String) -> ICNFCCardReader.Animation?
  func setAnimation(_ animation: ICNFCCardReader.Animation, forKey: Swift.String)
  func clearCache()
}
public struct LottieConfiguration : Swift.Hashable {
  public init(renderingEngine: ICNFCCardReader.RenderingEngineOption = .mainThread, decodingStrategy: ICNFCCardReader.DecodingStrategy = .codable)
  public static var shared: ICNFCCardReader.LottieConfiguration
  public var renderingEngine: ICNFCCardReader.RenderingEngineOption
  public var decodingStrategy: ICNFCCardReader.DecodingStrategy
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICNFCCardReader.LottieConfiguration, b: ICNFCCardReader.LottieConfiguration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum RenderingEngineOption : Swift.Hashable {
  case automatic
  case specific(ICNFCCardReader.RenderingEngine)
  public static var mainThread: ICNFCCardReader.RenderingEngineOption {
    get
  }
  public static var coreAnimation: ICNFCCardReader.RenderingEngineOption {
    get
  }
}
public enum RenderingEngine : Swift.Hashable {
  case mainThread
  case coreAnimation
}
extension ICNFCCardReader.RenderingEngineOption : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
extension ICNFCCardReader.RenderingEngine : Swift.RawRepresentable, Swift.CustomStringConvertible {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public enum DecodingStrategy : Swift.Hashable {
  case codable
  case dictionaryBased
  public static func == (a: ICNFCCardReader.DecodingStrategy, b: ICNFCCardReader.DecodingStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.FixedWidthInteger {
  public var hexString: Swift.String {
    get
  }
  public var bytes: [Swift.UInt8] {
    get
  }
}
extension Swift.Array where Element == Swift.UInt8 {
  public var hexString: Swift.String {
    get
  }
}
extension Swift.Array where Element == Swift.UInt8 {
  public init?(hexString: Swift.String)
}
extension Foundation.Data {
  public init?(hexString: Swift.String)
}
public enum LayerType : Swift.Int, Swift.Codable {
  case precomp
  case solid
  case image
  case null
  case shape
  case text
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MatteType : Swift.Int, Swift.Codable {
  case none
  case add
  case invert
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BlendMode : Swift.Int, Swift.Codable {
  case normal
  case multiply
  case screen
  case overlay
  case darken
  case lighten
  case colorDodge
  case colorBurn
  case hardLight
  case softLight
  case difference
  case exclusion
  case hue
  case saturation
  case color
  case luminosity
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension QuartzCore.CALayer {
  @nonobjc public func logLayerTree(withIndent: Swift.Int = 0)
}
@objc final public class CompatibleAnimation : ObjectiveC.NSObject {
  @objc public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class CompatibleAnimationView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(compatibleAnimation: ICNFCCardReader.CompatibleAnimation)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) final public var compatibleAnimation: ICNFCCardReader.CompatibleAnimation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var loopAnimationCount: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var shouldRasterizeWhenIdle: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var currentProgress: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var currentTime: Foundation.TimeInterval {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var currentFrame: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var realtimeAnimationFrame: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var realtimeAnimationProgress: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var animationSpeed: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var respectAnimationFrameRate: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public var isAnimationPlaying: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public func play()
  @objc @_Concurrency.MainActor(unsafe) final public func play(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_Concurrency.MainActor(unsafe) final public func play(fromProgress: CoreFoundation.CGFloat, toProgress: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) final public func play(fromFrame: CoreFoundation.CGFloat, toFrame: CoreFoundation.CGFloat, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) final public func play(fromMarker: Swift.String, toMarker: Swift.String, completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) final public func stop()
  @objc @_Concurrency.MainActor(unsafe) final public func pause()
  @objc @_Concurrency.MainActor(unsafe) final public func reloadImages()
  @objc @_Concurrency.MainActor(unsafe) final public func forceDisplayUpdate()
  @objc @_Concurrency.MainActor(unsafe) final public func getValue(for keypath: ICNFCCardReader.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> Any?
  @objc @_Concurrency.MainActor(unsafe) final public func logHierarchyKeypaths()
  @objc @_Concurrency.MainActor(unsafe) final public func setColorValue(_ color: UIKit.UIColor, forKeypath keypath: ICNFCCardReader.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor(unsafe) final public func getColorValue(for keypath: ICNFCCardReader.CompatibleAnimationKeypath, atFrame: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc @_Concurrency.MainActor(unsafe) final public func addSubview(_ subview: ICNFCCardReader.AnimationSubview, forLayerAt keypath: ICNFCCardReader.CompatibleAnimationKeypath)
  @objc @_Concurrency.MainActor(unsafe) final public func convert(rect: CoreFoundation.CGRect, toLayerAt keypath: ICNFCCardReader.CompatibleAnimationKeypath?) -> CoreFoundation.CGRect
  @objc @_Concurrency.MainActor(unsafe) final public func convert(point: CoreFoundation.CGPoint, toLayerAt keypath: ICNFCCardReader.CompatibleAnimationKeypath?) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) final public func progressTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) final public func frameTime(forMarker named: Swift.String) -> CoreFoundation.CGFloat
  @objc deinit
}
extension Swift.Sequence {
  public func toDictionary<K, V>(_ selector: (Self.Iterator.Element) throws -> (K, V)?) rethrows -> [K : V] where K : Swift.Hashable
}
extension Swift.String {
  public var isNumber: Swift.Bool {
    get
  }
}
extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func applyGradient(with colours: [UIKit.UIColor], locations: [Foundation.NSNumber]? = nil, size: CoreFoundation.CGSize)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func setGradient(with colours: [UIKit.UIColor], size: CoreFoundation.CGSize, cornerRadius: CoreFoundation.CGFloat)
}
extension UIKit.UIFont {
  public static func icNFCCardReaderRegisterFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public protocol AnimationFontProvider {
  func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
}
final public class DefaultFontProvider : ICNFCCardReader.AnimationFontProvider {
  public init()
  final public func fontFor(family: Swift.String, size: CoreFoundation.CGFloat) -> CoreText.CTFont?
  @objc deinit
}
public protocol AnimationTextProvider : AnyObject {
  func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
}
final public class DictionaryTextProvider : ICNFCCardReader.AnimationTextProvider {
  public init(_ values: [Swift.String : Swift.String])
  final public func textFor(keypathName: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
final public class DefaultTextProvider : ICNFCCardReader.AnimationTextProvider {
  public init()
  final public func textFor(keypathName _: Swift.String, sourceText: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup7 : ICNFCCardReader.DataGroup {
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
public typealias LottieCompletionBlock = (Swift.Bool) -> Swift.Void
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup2 : ICNFCCardReader.DataGroup {
  public var nrImages: Swift.Int {
    get
  }
  public var versionNumber: Swift.Int {
    get
  }
  public var lengthOfRecord: Swift.Int {
    get
  }
  public var numberOfFacialImages: Swift.Int {
    get
  }
  public var facialRecordDataLength: Swift.Int {
    get
  }
  public var nrFeaturePoints: Swift.Int {
    get
  }
  public var gender: Swift.Int {
    get
  }
  public var eyeColor: Swift.Int {
    get
  }
  public var hairColor: Swift.Int {
    get
  }
  public var featureMask: Swift.Int {
    get
  }
  public var expression: Swift.Int {
    get
  }
  public var poseAngle: Swift.Int {
    get
  }
  public var poseAngleUncertainty: Swift.Int {
    get
  }
  public var faceImageType: Swift.Int {
    get
  }
  public var imageDataType: Swift.Int {
    get
  }
  public var imageWidth: Swift.Int {
    get
  }
  public var imageHeight: Swift.Int {
    get
  }
  public var imageColorSpace: Swift.Int {
    get
  }
  public var sourceType: Swift.Int {
    get
  }
  public var deviceType: Swift.Int {
    get
  }
  public var quality: Swift.Int {
    get
  }
  public var imageData: [Swift.UInt8] {
    get
  }
  @objc deinit
}
extension ICNFCCardReader.BERTLV {
  public enum Error : Foundation.LocalizedError {
    case failedToParseHexString
    case missingLength
    case missingType
    case wrongLongLength
    case valueTooShort
    public static func == (a: ICNFCCardReader.BERTLV.Error, b: ICNFCCardReader.BERTLV.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct BERTLV : Swift.CustomStringConvertible, Swift.Equatable {
  public let tag: Swift.UInt64
  public let value: [Swift.UInt8]
  public let subTags: [ICNFCCardReader.BERTLV]
  public let isConstructed: Swift.Bool
  public let lengthBytes: [Swift.UInt8]
  public var rawTextValue: Swift.String? {
    get
  }
  public var bytes: [Swift.UInt8] {
    get
  }
  public var description: Swift.String {
    get
  }
  public static func == (a: ICNFCCardReader.BERTLV, b: ICNFCCardReader.BERTLV) -> Swift.Bool
}
public struct Vector1D : Swift.Hashable {
  public init(_ value: Swift.Double)
  public let value: Swift.Double
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICNFCCardReader.Vector1D, b: ICNFCCardReader.Vector1D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct Vector3D : Swift.Hashable {
  public let x: Swift.Double
  public let y: Swift.Double
  public let z: Swift.Double
  public init(x: Swift.Double, y: Swift.Double, z: Swift.Double)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICNFCCardReader.Vector3D, b: ICNFCCardReader.Vector3D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
final public class GradientValueProvider {
  public init(block: @escaping ICNFCCardReader.GradientValueProvider.ColorsValueBlock, locations: ICNFCCardReader.GradientValueProvider.ColorLocationsBlock? = nil)
  public init(_ colors: [ICNFCCardReader.Color], locations: [Swift.Double] = [])
  public typealias ColorsValueBlock = (CoreFoundation.CGFloat) -> [ICNFCCardReader.Color]
  public typealias ColorLocationsBlock = (CoreFoundation.CGFloat) -> [Swift.Double]
  final public var colors: [ICNFCCardReader.Color] {
    get
    set
  }
  final public var locations: [Swift.Double] {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICNFCCardReader.ValueProviderStorage<[Swift.Double]> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case UnsupportedCipherAlgorithm
  case UnsupportedMappingType
  case PACEError(Swift.String, Swift.String)
  case ChipAuthenticationFailed
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum OpenSSLError : Swift.Error {
  case UnableToGetX509CertificateFromPKCS7(Swift.String)
  case UnableToVerifyX509CertificateForSOD(Swift.String)
  case VerifyAndReturnSODEncapsulatedData(Swift.String)
  case UnableToReadECPublicKey(Swift.String)
  case UnableToExtractSignedDataFromPKCS7(Swift.String)
  case VerifySignedAttributes(Swift.String)
  case UnableToParseASN1(Swift.String)
  case UnableToDecryptRSASignature(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.OpenSSLError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PassiveAuthenticationError : Swift.Error {
  case UnableToParseSODHashes(Swift.String)
  case InvalidDataGroupHash(Swift.String)
  case SODMissing(Swift.String)
}
extension ICNFCCardReader.PassiveAuthenticationError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class NotImplementedDG : ICNFCCardReader.DataGroup {
  @objc deinit
}
final public class FloatValueProvider {
  public init(block: @escaping ICNFCCardReader.FloatValueProvider.CGFloatValueBlock)
  public init(_ float: CoreFoundation.CGFloat)
  public typealias CGFloatValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  final public var float: CoreFoundation.CGFloat {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICNFCCardReader.ValueProviderStorage<ICNFCCardReader.Vector1D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
final public class PointValueProvider {
  public init(block: @escaping ICNFCCardReader.PointValueProvider.PointValueBlock)
  public init(_ point: CoreFoundation.CGPoint)
  public typealias PointValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGPoint
  final public var point: CoreFoundation.CGPoint {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICNFCCardReader.ValueProviderStorage<ICNFCCardReader.Vector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
extension ICNFCCardReader.Animation {
  public typealias DownloadClosure = (ICNFCCardReader.Animation?) -> Swift.Void
  final public var duration: Foundation.TimeInterval {
    get
  }
  final public var bounds: CoreFoundation.CGRect {
    get
  }
  final public var size: CoreFoundation.CGSize {
    get
  }
  public static func named(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, subdirectory: Swift.String? = nil, animationCache: (any ICNFCCardReader.AnimationCacheProvider)? = nil) -> ICNFCCardReader.Animation?
  public static func filepath(_ filepath: Swift.String, animationCache: (any ICNFCCardReader.AnimationCacheProvider)? = nil) -> ICNFCCardReader.Animation?
  public static func asset(_ name: Swift.String, bundle: Foundation.Bundle = Bundle.main, animationCache: (any ICNFCCardReader.AnimationCacheProvider)? = nil) -> ICNFCCardReader.Animation?
  public static func from(data: Foundation.Data, strategy: ICNFCCardReader.DecodingStrategy = LottieConfiguration.shared.decodingStrategy) throws -> ICNFCCardReader.Animation
  public static func loadedFrom(url: Foundation.URL, closure: @escaping ICNFCCardReader.Animation.DownloadClosure, animationCache: (any ICNFCCardReader.AnimationCacheProvider)?)
  final public func progressTime(forMarker named: Swift.String) -> ICNFCCardReader.AnimationProgressTime?
  final public func frameTime(forMarker named: Swift.String) -> ICNFCCardReader.AnimationFrameTime?
  final public func progressTime(forFrame frameTime: ICNFCCardReader.AnimationFrameTime, clamped: Swift.Bool = true) -> ICNFCCardReader.AnimationProgressTime
  final public func frameTime(forProgress progressTime: ICNFCCardReader.AnimationProgressTime) -> ICNFCCardReader.AnimationFrameTime
  final public func time(forFrame frameTime: ICNFCCardReader.AnimationFrameTime) -> Foundation.TimeInterval
  final public func frameTime(forTime time: Foundation.TimeInterval) -> ICNFCCardReader.AnimationFrameTime
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func hexToBin(_ val: Swift.UInt64) -> [Swift.UInt8]
public func binToInt(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.Int
public func binToInt(_ val: [Swift.UInt8]) -> Swift.Int
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName: ICNFCCardReader.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func aesMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
public func intToBytes(val: Swift.Int, removePadding: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func oidToBytes(oid: Swift.String, replaceTag: Swift.Bool) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcHash(data: [Swift.UInt8], hashAlgorithm: Swift.String) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA224Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA256Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA512Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA384Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ChipAuthenticationInfo : ICNFCCardReader.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getKeyId() -> Swift.Int
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@available(iOS 13, *)
public enum PACEAccessKey {
  case mrz(Swift.String)
  case can(Swift.String)
}
@available(iOS 13, *)
public class PACEHandler {
  public init(cardAccess: ICNFCCardReader.CardAccess, tagReader: ICNFCCardReader.TagReader) throws
  #if compiler(>=5.3) && $AsyncAwait
  public func doPACE(accessKey: ICNFCCardReader.PACEAccessKey) async throws
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Asset : Swift.Codable {
  required public init(from decoder: any Swift.Decoder) throws
  final public let id: Swift.String
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol ICNFCReaderChipDelegate {
  @objc func icNFCReaderChipDismissed()
  @objc func icNFCReaderChipCompleted(avatar: UIKit.UIImage, informationDetails: [Swift.String : Swift.String], dataGroups: [Swift.String : Swift.String], chipAuthentication: ICNFCCardReader.ICNFCAuthenticationStatus, activeAuthentication: ICNFCCardReader.ICNFCAuthenticationStatus)
  @objc func icNFCReadingChip(state: ICNFCCardReader.ICNFCReaderState, progress: Swift.Int, error: Swift.String, logError: [Swift.String : Swift.String])
  @objc func icNFCPopupReaderChipDisappear()
}
@_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objc @_Concurrency.MainActor(unsafe) open class ICNFCReaderChipViewController : ICNFCCardReader.ICNFCBaseViewController {
  @objc @_Concurrency.MainActor(unsafe) public var delegate: (any ICNFCCardReader.ICNFCReaderChipDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var isShowTutorial: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isEnableGotIt: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var cardReaderStep: ICNFCCardReader.CardReaderStep
  @objc @_Concurrency.MainActor(unsafe) public var idNumber: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var birthDate: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var expiryDate: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var nameVideoHelpNFC: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var nameAnimationStatus: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var readingTagsNFC: [Swift.Int]?
  @objc @_Concurrency.MainActor(unsafe) public var isActiveAuthentication: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isChipAuthentication: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var isStartNFCReaderOutSide: Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public var textReadyNFC: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var textScanningNFC: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var textFinishNFC: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public var textDetectedNFC: Swift.String
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICNFCReaderChipViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func startIndicatorView()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func stopIndicatorView()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func readOnlySpecificDataOutSide()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func deallocSessionReaderChipNFC()
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICNFCReaderChipViewController : ICNFCCardReader.ICNFCHelpFullScreenVideosDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icNFCHelpFullScreenVideosGotIt()
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICNFCReaderChipViewController : ICNFCCardReader.ICPopupCloseSdkDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icPopupCloseSdkPressedLeft()
  @_Concurrency.MainActor(unsafe) @objc dynamic public func icPopupCloseSdkPressedRight()
}
@available(iOS 13.0, *)
extension ICNFCCardReader.ICNFCReaderChipViewController : ICNFCCardReader.PassportReaderDelegate {
  @_Concurrency.MainActor(unsafe) public func passportReaderSessionDidBecomeActive(_ session: CoreNFC.NFCTagReaderSession)
  @_Concurrency.MainActor(unsafe) public func passportReaderIdInvalidate(_ session: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) public func passportReaderSessionDidDetect(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
  @_Concurrency.MainActor(unsafe) public func passportReaderReadingProgress(progress: Swift.Int)
}
public enum PACEMappingType {
  case GM
  case IM
  case CAM
  public static func == (a: ICNFCCardReader.PACEMappingType, b: ICNFCCardReader.PACEMappingType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class PACEInfo : ICNFCCardReader.SecurityInfo {
  public static let PARAM_ID_GFP_1024_160: Swift.Int
  public static let PARAM_ID_GFP_2048_224: Swift.Int
  public static let PARAM_ID_GFP_2048_256: Swift.Int
  public static let PARAM_ID_ECP_NIST_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P192_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P224_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P256_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P320_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P384_R1: Swift.Int
  public static let PARAM_ID_ECP_BRAINPOOL_P512_R1: Swift.Int
  public static let PARAM_ID_ECP_NIST_P521_R1: Swift.Int
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getVersion() -> Swift.Int
  public func getParameterId() -> Swift.Int?
  public func getParameterSpec() throws -> Swift.Int32
  public func getMappingType() throws -> ICNFCCardReader.PACEMappingType
  public func getKeyAgreementAlgorithm() throws -> Swift.String
  public func getCipherAlgorithm() throws -> Swift.String
  public func getDigestAlgorithm() throws -> Swift.String
  public func getKeyLength() throws -> Swift.Int
  public func createMappingKey() throws -> Swift.OpaquePointer
  public static func getParameterSpec(stdDomainParam: Swift.Int) throws -> Swift.Int32
  public static func toMappingType(oid: Swift.String) throws -> ICNFCCardReader.PACEMappingType
  public static func toKeyAgreementAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toCipherAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toDigestAlgorithm(oid: Swift.String) throws -> Swift.String
  public static func toKeyLength(oid: Swift.String) throws -> Swift.Int
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class ASN1Item : Swift.CustomDebugStringConvertible {
  public init(line: Swift.String)
  public func getChild(_ child: Swift.Int) -> ICNFCCardReader.ASN1Item?
  public func getNumberOfChildren() -> Swift.Int
  public var debugDescription: Swift.String {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public class SimpleASN1DumpParser {
  public init()
  public func parse(data: Foundation.Data) throws -> ICNFCCardReader.ASN1Item
  public func test()
  @objc deinit
}
public typealias AnimationFrameTime = CoreFoundation.CGFloat
public typealias AnimationProgressTime = CoreFoundation.CGFloat
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup14 : ICNFCCardReader.DataGroup {
  public var securityInfos: [ICNFCCardReader.SecurityInfo] {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AnimationSubview : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
infix operator +| : DefaultPrecedence
infix operator +- : DefaultPrecedence
extension ICNFCCardReader.Color : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateType {
  case documentSigningCertificate
  case issuerSigningCertificate
  public static func == (a: ICNFCCardReader.CertificateType, b: ICNFCCardReader.CertificateType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public enum CertificateItem : Swift.String {
  case fingerprint
  case issuerName
  case subjectName
  case serialNumber
  case signatureAlgorithm
  case publicKeyAlgorithm
  case notBefore
  case notAfter
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class X509Wrapper {
  final public let cert: Swift.OpaquePointer
  public init?(with cert: Swift.OpaquePointer?)
  public func getItemsAsDict() -> [ICNFCCardReader.CertificateItem : Swift.String]
  public func certToPEM() -> Swift.String
  public func getFingerprint() -> Swift.String?
  public func getNotBeforeDate() -> Swift.String?
  public func getNotAfterDate() -> Swift.String?
  public func getSerialNumber() -> Swift.String?
  public func getSignatureAlgorithm() -> Swift.String?
  public func getPublicKeyAlgorithm() -> Swift.String?
  public func getIssuerName() -> Swift.String?
  public func getSubjectName() -> Swift.String?
  @objc deinit
}
public class BundleImageProvider : ICNFCCardReader.AnimationImageProvider {
  public init(bundle: Foundation.Bundle, searchPath: Swift.String?)
  public func imageForAsset(asset: ICNFCCardReader.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
public struct AnimationKeypath : Swift.Hashable, Swift.ExpressibleByStringLiteral {
  public init(keypath: Swift.String)
  public init(stringLiteral: Swift.String)
  public init(keys: [Swift.String])
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ICNFCCardReader.AnimationKeypath, b: ICNFCCardReader.AnimationKeypath) -> Swift.Bool
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
final public class LottieLogger {
  public init(assert: @escaping ICNFCCardReader.LottieLogger.Assert = Swift.assert, assertionFailure: @escaping ICNFCCardReader.LottieLogger.AssertionFailure = Swift.assertionFailure, warn: @escaping ICNFCCardReader.LottieLogger.Warn = { message, _, _ in
    }, info: @escaping ICNFCCardReader.LottieLogger.Info = { message in
    })
  public typealias Assert = (_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias AssertionFailure = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Warn = (_ message: @autoclosure () -> Swift.String, _ fileID: Swift.StaticString, _ line: Swift.UInt) -> Swift.Void
  public typealias Info = (_ message: @autoclosure () -> Swift.String) -> Swift.Void
  public static var shared: ICNFCCardReader.LottieLogger
  final public func assert(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func assertionFailure(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func warn(_ message: @autoclosure () -> Swift.String = String(), fileID: Swift.StaticString = #fileID, line: Swift.UInt = #line)
  final public func info(_ message: @autoclosure () -> Swift.String = String())
  @objc deinit
}
extension ICNFCCardReader.LottieLogger {
  public static var printToConsole: ICNFCCardReader.LottieLogger {
    get
  }
}
@objc public protocol ICNFCQRCodeScannerViewDelegate {
  @objc func qrScanningDidFail()
  @objc func qrScanningSucceededWithImage(_ image: UIKit.UIImage, value: Swift.String)
  @objc func qrScanningDidStop()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class ICNFCQRCodeScannerView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: (any ICNFCCardReader.ICNFCQRCodeScannerViewDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var captureSession: AVFoundation.AVCaptureSession!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var layer: AVFoundation.AVCaptureVideoPreviewLayer {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension ICNFCCardReader.ICNFCQRCodeScannerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var isSessionRunning: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func startScanning()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func stopScanning()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func resetDataToRescan()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func removeInputOutput()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func deallocSession()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func doInitialSetup(scanRect: CoreFoundation.CGRect)
}
extension ICNFCCardReader.ICNFCQRCodeScannerView : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension ICNFCCardReader.ICNFCQRCodeScannerView : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class CardAccess {
  public var securityInfos: [ICNFCCardReader.SecurityInfo] {
    get
  }
  @objc deinit
}
public protocol AnyValueProvider {
  var valueType: any Any.Type { get }
  var typeErasedStorage: ICNFCCardReader.AnyValueProviderStorage { get }
  func hasUpdate(frame: ICNFCCardReader.AnimationFrameTime) -> Swift.Bool
}
extension ICNFCCardReader.AnyValueProvider {
  public func value(frame: ICNFCCardReader.AnimationFrameTime) -> Any
}
public enum ValueProviderStorage<T> where T : ICNFCCardReader.AnyInterpolatable {
  case singleValue(T)
  case keyframes([ICNFCCardReader.Keyframe<T>])
  case closure((ICNFCCardReader.AnimationFrameTime) -> T)
}
public enum AnyValueProviderStorage {
  case singleValue(Any)
  case keyframes([ICNFCCardReader.Keyframe<Any>], interpolate: (ICNFCCardReader.AnimationFrameTime) -> Any)
  case closure((ICNFCCardReader.AnimationFrameTime) -> Any)
}
public class LRUAnimationCache : ICNFCCardReader.AnimationCacheProvider {
  public init()
  public static let sharedCache: ICNFCCardReader.LRUAnimationCache
  public var cacheSize: Swift.Int
  public func clearCache()
  public func animation(forKey: Swift.String) -> ICNFCCardReader.Animation?
  public func setAnimation(_ animation: ICNFCCardReader.Animation, forKey: Swift.String)
  @objc deinit
}
extension ICNFCCardReader.AnimationView {
  @_Concurrency.MainActor(unsafe) convenience public init(name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: (any ICNFCCardReader.AnimationImageProvider)? = nil, animationCache: (any ICNFCCardReader.AnimationCacheProvider)? = LRUAnimationCache.sharedCache, configuration: ICNFCCardReader.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) convenience public init(filePath: Swift.String, imageProvider: (any ICNFCCardReader.AnimationImageProvider)? = nil, animationCache: (any ICNFCCardReader.AnimationCacheProvider)? = LRUAnimationCache.sharedCache, configuration: ICNFCCardReader.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) convenience public init(url: Foundation.URL, imageProvider: (any ICNFCCardReader.AnimationImageProvider)? = nil, closure: @escaping ICNFCCardReader.AnimationView.DownloadClosure, animationCache: (any ICNFCCardReader.AnimationCacheProvider)? = LRUAnimationCache.sharedCache, configuration: ICNFCCardReader.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) convenience public init(asset name: Swift.String, bundle: Foundation.Bundle = Bundle.main, imageProvider: (any ICNFCCardReader.AnimationImageProvider)? = nil, animationCache: (any ICNFCCardReader.AnimationCacheProvider)? = LRUAnimationCache.sharedCache, configuration: ICNFCCardReader.LottieConfiguration = .shared)
  public typealias DownloadClosure = ((any Swift.Error)?) -> Swift.Void
}
@available(iOS 13, macOS 10.15, *)
public enum DocTypeEnum : Swift.String {
  case TD1
  case TD2
  case OTHER
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup1 : ICNFCCardReader.DataGroup {
  public var elements: [Swift.String : Swift.String] {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: ICNFCCardReader.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  public func hash(_ hashAlgorythm: Swift.String) -> [Swift.UInt8]
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class AnimatedControl : UIKit.UIControl {
  @_Concurrency.MainActor(unsafe) public init(animation: ICNFCCardReader.Animation, configuration: ICNFCCardReader.LottieConfiguration = .shared)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) open func animationDidSet()
  @_Concurrency.MainActor(unsafe) final public let animationView: ICNFCCardReader.AnimationView
  @_Concurrency.MainActor(unsafe) public var animation: ICNFCCardReader.Animation? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationSpeed: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func setLayer(named: Swift.String, forState: UIKit.UIControl.State)
  @_Concurrency.MainActor(unsafe) public func setValueProvider(_ valueProvider: any ICNFCCardReader.AnyValueProvider, keypath: ICNFCCardReader.AnimationKeypath)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class ActiveAuthenticationInfo : ICNFCCardReader.SecurityInfo {
  override public func getObjectIdentifier() -> Swift.String
  override public func getProtocolOIDString() -> Swift.String
  public func getSignatureAlgorithmOIDString() -> Swift.String?
  @objc deinit
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false)
  public func parse(mrzLines: [Swift.String]) -> ICNFCCardReader.QKMRZResult?
  public func parse(mrzString: Swift.String) -> ICNFCCardReader.QKMRZResult?
  @objc deinit
}
public class FilepathImageProvider : ICNFCCardReader.AnimationImageProvider {
  public init(filepath: Swift.String)
  public init(filepath: Foundation.URL)
  public func imageForAsset(asset: ICNFCCardReader.ImageAsset) -> CoreGraphics.CGImage?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class ICNFCConstant : ObjectiveC.NSObject {
  @objc public static let FontRegular: Swift.String
  @objc public static let FontMedium: Swift.String
  @objc public static let FontBold: Swift.String
  @objc public static let IsIpad: (Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
final public class SizeValueProvider {
  public init(block: @escaping ICNFCCardReader.SizeValueProvider.SizeValueBlock)
  public init(_ size: CoreFoundation.CGSize)
  public typealias SizeValueBlock = (CoreFoundation.CGFloat) -> CoreFoundation.CGSize
  final public var size: CoreFoundation.CGSize {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICNFCCardReader.ValueProviderStorage<ICNFCCardReader.Vector3D> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> ICNFCCardReader.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [ICNFCCardReader.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [ICNFCCardReader.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
final public class ColorValueProvider {
  public init(block: @escaping ICNFCCardReader.ColorValueProvider.ColorValueBlock)
  public init(_ color: ICNFCCardReader.Color)
  public init(_ keyframes: [ICNFCCardReader.Keyframe<ICNFCCardReader.Color>])
  public typealias ColorValueBlock = (CoreFoundation.CGFloat) -> ICNFCCardReader.Color
  final public var color: ICNFCCardReader.Color {
    get
    set
  }
  final public var valueType: any Any.Type {
    get
  }
  final public var storage: ICNFCCardReader.ValueProviderStorage<ICNFCCardReader.Color> {
    get
  }
  final public func hasUpdate(frame _: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
extension ICNFCCardReader.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension ICNFCCardReader.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension ICNFCCardReader.CoordinateSpace : Swift.Equatable {}
extension ICNFCCardReader.CoordinateSpace : Swift.Hashable {}
extension ICNFCCardReader.CoordinateSpace : Swift.RawRepresentable {}
extension ICNFCCardReader.LottieBackgroundBehavior : Swift.Equatable {}
extension ICNFCCardReader.LottieBackgroundBehavior : Swift.Hashable {}
extension ICNFCCardReader.AnimatedSwitch.CancelBehavior : Swift.Equatable {}
extension ICNFCCardReader.AnimatedSwitch.CancelBehavior : Swift.Hashable {}
extension ICNFCCardReader.PassportAuthenticationStatus : Swift.Equatable {}
extension ICNFCCardReader.PassportAuthenticationStatus : Swift.Hashable {}
extension ICNFCCardReader.LogLevel : Swift.Equatable {}
extension ICNFCCardReader.LogLevel : Swift.Hashable {}
extension ICNFCCardReader.LogLevel : Swift.RawRepresentable {}
extension ICNFCCardReader.LayerType : Swift.Equatable {}
extension ICNFCCardReader.LayerType : Swift.Hashable {}
extension ICNFCCardReader.LayerType : Swift.RawRepresentable {}
extension ICNFCCardReader.MatteType : Swift.Equatable {}
extension ICNFCCardReader.MatteType : Swift.Hashable {}
extension ICNFCCardReader.MatteType : Swift.RawRepresentable {}
extension ICNFCCardReader.BlendMode : Swift.Equatable {}
extension ICNFCCardReader.BlendMode : Swift.Hashable {}
extension ICNFCCardReader.BlendMode : Swift.RawRepresentable {}
extension ICNFCCardReader.BERTLV.Error : Swift.Equatable {}
extension ICNFCCardReader.BERTLV.Error : Swift.Hashable {}
extension ICNFCCardReader.GradientValueProvider : ICNFCCardReader.AnyValueProvider {}
extension ICNFCCardReader.FloatValueProvider : ICNFCCardReader.AnyValueProvider {}
extension ICNFCCardReader.PointValueProvider : ICNFCCardReader.AnyValueProvider {}
extension ICNFCCardReader.PACEMappingType : Swift.Equatable {}
extension ICNFCCardReader.PACEMappingType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.CertificateType : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.CertificateType : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.CertificateItem : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.CertificateItem : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.CertificateItem : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.DocTypeEnum : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.DocTypeEnum : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.DocTypeEnum : Swift.RawRepresentable {}
extension ICNFCCardReader.SizeValueProvider : ICNFCCardReader.AnyValueProvider {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension ICNFCCardReader.DataGroupId : Swift.RawRepresentable {}
extension ICNFCCardReader.ColorValueProvider : ICNFCCardReader.AnyValueProvider {}
